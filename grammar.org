
* Language
** Terminals
   num    = "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" ;
   char   = "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" | "a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j" | "k" | "l" | "m" | "n" | "o" | "p" | "q" | "r" | "s" | "t" | "u" | "v" | "w" | "x" | "y" | "z" ; 
   sym    = "!" | "@" | "#" | "$" |"%" | "^" | "*" | "-" | "_";
   string = ('"', (" " | num | char | sym)*, '"') | ("'", (" " | num | char | sym)*, "'")
   bool   = "True" | "False"
   none   = "None"
   var   = ("_" | sym | char), (sym | char | num)*
   ws     = " "
  
** Logic
   logic      = ("(", logic_or, ")") | logic_or
   logic_or   = (logic, ws+, "or", ws+, logic) | logic_and
   logic_and  = (logic, ws+, "and", ws+, logic) | logic_flow | logic_comp
   logic_flow = (query, ws*, "~", ws*, query, ">", logic_flow) | query
   logic_comp = (logic_comp, (ws*, ("==" | "!=" | "<" | "<=" | ">" | ">="), ws*), logic_comp) | unary
   unary      = ws*, "not", ws*, logic | math_add
   math_add   = (math_add, (ws*, "+" | "-", ws*), math_add) | math_mult
   math_mult  = (math_mult, (ws*, "*" | "/" | "%", ws*), math_mult) | app
   app        = app, "(", logic*, ")" | attr
   attr       = (app, "[", ws*, logic, ws*, "]") | (app, ".", app) | query
   query      = ("{", ws*, var, ws*, [ws, "in", ws+, query, ws*], "|", ws*, logic+, "}") | list
   list       = "[", ws*, logic*, ws*, logic, "]"
   terms      = var | num | string | bool | none
   
** Structure
   program    = (let | resolve)+
   let        = "let ", var, ws*, "=", ws*, logic
   
** Resolvables
   exists    = "exists", ws+, logic
   forall    = "forall", ws+, logic
   resolve   = exists | forall
   
* AST
** Terminals
   var    = [ "var", <string> ]
   num    = [ "number", [0-9]+ ]
   string = [ "string", "<string>" ]
   none   = [ "empty", <None> ]   
   
** Program
   program = [ "program", (let | compare | decl)* ]
   compare = [ ("==" | ">" | ">=" | "<" | "<=" | "!="), comp, comp ]
   comp    = logic | not | list | func | math | path | var | string | bool | none
   let     = [ "let", var, comp ]
   logic   = [ ("and" | "or"), comp, comp ]
   not     = [ "not", comp ]
   list    = [ "list",  comp* ]
   func    = [ "app", <func>, [ comp* ] ]
   math    = [ ("+" | "-" | "/" | "*"), comp, comp ]
   
** Graph
   node = [ "node", logic* ]
   path = [ "path", logic*, (node | var), (node | path | var) ]
   flow = [ "flow", logic*, (node | var), (node | flow | var) ]
   
** Compositions
   decl = [ "exists", (var | node | flow | path) ]
   
